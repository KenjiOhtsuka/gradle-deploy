/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'kenji' at '11.03.17 22:54' with Gradle 3.2.1
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.2.1/userguide/tutorial_java_projects.html
 */

/*
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
*/

import groovy.json.JsonSlurper

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.hidetake:gradle-ssh-plugin:2.8.0'
    }
}

apply plugin: 'org.hidetake.ssh'

ssh.settings {
    dryRun = project.hasProperty('dryRun')
}

repositories {
    mavenCentral()
}

def setupServer(serverRole) {
    // read and set servers
    JsonSlurper slurper = new JsonSlurper()
    def deployConfig = slurper.parse(new File('deploy_config.json'))
    deployConfig.hosts.each {
        if (it.role != serverRole) return;
        def serverHost = it.host
        remotes.create(serverHost) {
            role serverRole
            host = serverHost
            user = deployConfig.user
            identity = file(deployConfig.key)
            passphrase = deployConfig.pass_phrase
        }
    }
}

/**
 * deploy
 */
task deploy << {
    // set target server role
    if (!project.hasProperty("serverRole")) return
    def serverRole = project.properties['serverRole']

    JsonSlurper slurper = new JsonSlurper()
    def deployConfig = slurper.parse(new File('deploy_config.json'))
    def gitUserName = deployConfig.git.user_name
    def gitPassword = deployConfig.git.password


    setupServer serverRole

    ssh.settings {
        knownHosts = allowAnyHosts
    }

    def railsRoot = "/program_root_path"
    def backupRoot = "/backup_root_path"
    ssh.run {
        session(remotes) {
            def exitFlag = false
            execute("df -h") { result ->
                def loop = true
                while (loop) {
                    println "Continue? Y or N: "
                    switch (System.in.newReader().readLine()) {
                        case ~/^[Yy]$/:
                            loop = false
                            break
                        case ~/^[Nn]$/:
                            loop = false
                            exitFlag = true
                            break
                    }
                }
            }
            if (exitFlag) return
            execute "rm -rf ${backupRoot}"
            execute "cp -prv ${railsRoot} ${backupRoot}"
            execute "cd ${railsRoot}; git checkout -- db/schema.rb"
            execute("cd ${railsRoot}; git pull")
            execute "rake db:migrate RAILS_ENV=production"
            executeSudo("apachectl -k graceful; echo \$?") { result ->
                switch (result) {
                    case "0":
                        println "Success"
                        break
                    default:
                        println "Failed"
                }
            }
        }
    }
}

/**
 * rollback
 */
